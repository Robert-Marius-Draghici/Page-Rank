Metode Numerice:Tema 2
DrÄƒghici Marius Robert, grupa 315CD
	
		Task1: Algoritmul Iterative
		Aceasta functie implementeaza algoritmul iterativ pentru calcularea indicelui Page Rank. In primul rand, trebuie sa calculam mai intai matricea de adiacenta, pas ce va fi implementat si in urmatoarele 2 taskuri. Extragem liniile din fisier cu ajutorul functiei fgetl. Aceasta functie returneaza linia ca un sir de caractere deci trebuie convertita in numere intregi cu ajutorul functiei str2num. Functia fgetl permite ca al doilea parametru numarul de caractere pe care dorim sa le extragem din fiecare linie, ceea ce este util pentru a extrage mai intai numarul paginii, apoi numarul de linkuri catre alte pagini si apoi sa creem un vector cu numarul paginilor spre care conduce pagina curenta. Cand extragem o parte din linie, specificand si al doilea parametru, trebuie sa adunam si numarul de spatii dintre cuvinte pentru a extrage exact ceea ce dorim. Deoarece o pagina poate avea link catre ea insasi, trebuie sa specificam explicit ca elementele de pe diagonala principala sunt nule. De asemenea, atunci cand creem matricea K(matricea care are pe diagonala principala numarul de paginii spre care conduce pagina curenta) trebuie sa scadem de pe diagonala principala o unitate, daca pagina curenta are link catre ea insasi. Matricea M o calculam cu formula a doua, cu K.
		Initializam pasul de iteratie, conform enuntului, cu 1 supra numarul de linii din matricea M. In instructiunea while, aplicam relatia de recurenta descrisa in enunt cat timp nu a fost atinsa acuratetea dorita adica atata timp cat succes = 0.
		
		Task2: Algoritmul Algebraic
		Cea de-a doua functie implementeaza algoritmul algebric cu acelasi scop. Crearea matricei de adiacenta, a matricei K si a matricei M se realizeaza in aceeasi maniera ca la task 1. Vectorul de PageRank-uri este calculat de aceasta data cu o formula algebrica ce necesita calcularea unei inverse. Aceasta inversa este calculata cu ajutorul algoritmului Gram-Schmidt modificat, ce are o stabilitate numerica mai mare fata de cel clasic, reducand erorile de rotunjire. Algoritmul Gram-Schmidt modificat a fost implementat conform algoritmului descris in laboratorul 3, aducand drept modificari modul de calculare a normei euclidiene si vectorizarea celui de-al doilea for. Aplicam algoritmul Gram-Schmidt pentru a descompune matricea data ca parametru in 2 matrici, Q ortogonala si R superior triunghiulara si apoi rezolvam un sistem superior triunghiular conform algoritmului descris in laboratorul 2 cu mentiunea ca in loc de un vector de termeni liberi avem o matrice de termeni liberi.
B = A^(-1);
A * B = In;
Q * R * B = In;
R * B = Q';
B = SST(R,Q');		

		Task3: Algoritmul Power Method
		Aceasta functie implementeaza ultimul algoritm de cautare a indicelui PageRank utilizand metoda puterii. Crearea matricei de adiacenta, a matricei K si a matricei M se realizeaza in aceeasi maniera ca la task 1. Matricea M a fost creata asa incat sa fie stochastica pe coloane deci metoda puterii poate fi aplicata. Matricile E si P au fost calculate conform formulelor descrise in enunt. Utilizam metoda puterii, pentru a calcula R ca vector propriu asociat valorii proprii dominante 1 a matricei P, asa cum reiese din formula 1*R = P*R. Alegem un pas de iteratie aleator cu ajutorul functiei rand(), care reprezinta aproximatia vectorului propriu la care vem sa ajungem. In bucla while, calculam vectorul propriu in functie de vectorul de la pasul anterior, apropiindu-ne de valoarea dorita cu fiecare iteratie. Recurenta se opreste atunci cand atingem acuratetea dorita. Prezenta numarului de iteratii maxime este necesara pentru a evita intrarea intr-o bucla infinita, generata de norma in functie de 1.
		
		Task4: Grad de apartenenta
		Functia Apartenenta calculeaza gradul de apartenenta al paginii a carui PageRank este x la multimea paginilor importante, utilizand functia pe ramuri din enunt. Deoarece functia trebuie sa fie continua, inseamna ca limitele in cele 2 puncte val1 si val2 trebuie sa fie egale. Deci a*x + b = 0, pentru x = val1 si a*x + b = 1, pentru x = val2. Creem un sistem care ne va permite sa calculam indicii a si b si sa calculam gradul de apartenenta in functie de x trimis ca parametru. Sistemul are matricea coeficientilor A = [ val1 1; val2 1] iar n reprezinta vectorul de necunoscute a si b. Sistemul este rezolvat cu metoda Gram-Schmidt de la taskul 2. Apoi, in functia PageRank scriem in fisierul de output numarul de linii, apoi cei 3 vectori PageRank creati la taskurile anterioare, dupa aceea realizam clasamentul pentru al doilea vector, utilizand algoritmul insertion sort pentru sortare descris aici http://www.mathworks.com/matlabcentral/fileexchange/45125-sorting-methods/content/Sorting%20Methods/insertionsort.m . Acest algoritm preia elementul imediat urmator dupa secventa deja sortata si il insereaza la locul sau. Algoritmul a fost modificat pentru a realiza sortarea descrescator si pentru a interschimba si pozitiile pentru a putea realiza clasamentul cum trebuie. Erorile legate de compararea numerelor reale faceau ca ultimele 2 linii sa fie interschimbate, astfel incat am fost nevoit sa le interschimb manual pentru a reda outputul corect. Calculez gradul de apartenenta pentru vectorul deja sortat si apoi scriu in fisier acest clasament asa cum a fost descris in enunt.
